{"version":3,"sources":["GlobalStyle.js","Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","useTasks.js","App.js","serviceWorker.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","StyledForm","styled","form","breakpoint","mobileMax","Input","input","alto","Button","button","teal","white","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","current","focus","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","done","gray","toggleDone","forestGreen","remove","crimson","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","className","onClick","content","ButtonsWrapper","div","silver","Buttons","toggleHideDone","setAllDone","length","disabled","every","Wrapper","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Main","main","Container","children","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","useTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","black","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a472c1f2.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    cursor: pointer;\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import React, { useState, useRef } from \"react\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        addNewTask(trimmedNewTaskContent);\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n         display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    letter-spacing: 0.5px;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n        color: ${({ theme }) => theme.color.gray};\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: filter 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.forestGreen};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import React from \"react\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item\r\n                key={task.id}\r\n                hidden={task.done && hideDone}\r\n                className={`tasks__item${\r\n                    task.done && hideDone\r\n                        ? \" tasks__item--hidden\"\r\n                        : \"\"}`\r\n                }\r\n            >\r\n                <Button\r\n                    toggleDone\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"âœ”\" : \"\"}\r\n                </Button>\r\n                <Content done={task.done}>\r\n                    {task.content}\r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    ðŸ—‘\r\n                </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n);\r\n\r\nexport default Tasks;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsWrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.teal};\r\n    background: transparent;\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: filter 0.3s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;","import React from \"react\";\r\nimport { ButtonsWrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <ButtonsWrapper>\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <Button onClick={toggleHideDone}>\r\n                    {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n\t\t\t    </Button>\r\n                <Button\r\n                    onClick={setAllDone}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    UkoÅ„cz wszystkie\r\n\t\t\t    </Button>\r\n            </>\r\n        )}\r\n    </ButtonsWrapper>\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n    padding: 20px;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import { useState, useEffect } from \"react\";\r\n\r\nconst getInitialTasks = () => {\r\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n    return tasksFromLocalStorage\r\n        ? JSON.parse(tasksFromLocalStorage)\r\n        : []\r\n};\r\n\r\nexport const useTasks = () => {\r\n    const [tasks, setTasks] = useState(getInitialTasks);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks))\r\n    }, [tasks]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            }\r\n\r\n            return task;\r\n        }));\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask,\r\n    };\r\n}","import React, { useState } from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useTasks } from \"./useTasks\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask,\n  } = useTasks();\n\n  return (\n    <Container className=\"container\">\n      <Header title=\"Lista zadaÅ„\" />\n\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n\n      <Section\n        title=\"Lista zadaÅ„\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone} />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        gray: \"#888888\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}